#!/usr/bin/env ruby

# Esse git hook irá prevenir o merge de qualquer branch com a stage
# Coloque esse arquivo no seu repositório local na pasta .git/hooks
# e garanta que está executável
# O nome do arquivo *precisa* ser "prepare-commit-msg" para o entendimento do Git.


require "highline/import"

FORBIDDEN_BRANCHES = ["stage"]

def merge?
    ARGV[1] == "merge"
end

def current_branch
    @current_branch = `git branch | grep '*' | sed 's/* //'`.chop
end


#def into_teste_pretect?
#    current_branch == "teste-pretect" || current_branch == "teste-pretect-deploy"
#end

def merge_msg
    @msg ||= `cat .git/MERGE_MSG`
end

def from_branch
    @from_branch = merge_msg.match(/Merge branch '(.*?)'/)[1]
end

def from_forbidden_branch?
    FORBIDDEN_BRANCHES.include?(from_branch)
end

def red(mytext) ; "\e[31m#{mytext}\e[0m" ; end
def green(mytext) ; "\e[32m#{mytext}\e[0m" ; end
def yellow(mytext) ; "\e[33m#{mytext}\e[0m" ; end

#if merge? && into_teste_pretect? && from_forbidden_branch?
if merge? && from_forbidden_branch? && current_branch != "stage"
    puts
    puts yellow(" CUIDADO!")
    puts yellow(" Você está tentando mesclar a branch #{from_branch} na branch *#{current_branch}*.")
    confirm = ask(yellow("Você tem certeza que quer fazer isso? [Y/N] ")) { |yn| yn.limit = 1, yn.validate = /[yn]/i }
    if confirm.downcase == 'y'
        puts green("Prosseguindo com o Merge")
        exit 0
    else
        out = `git reset --merge`
        puts yellow("Rode o seguinte comando para descartar as mudanças do merge:")
        puts
        puts green(" git reset --merge")
        puts
        exit 1
    end 
end